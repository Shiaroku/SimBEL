// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// echeancier
NumericMatrix echeancier(NumericVector coupon, NumericVector maturite, NumericVector zspread, NumericVector nominal, NumericVector yield);
RcppExport SEXP _SimBEL_echeancier(SEXP couponSEXP, SEXP maturiteSEXP, SEXP zspreadSEXP, SEXP nominalSEXP, SEXP yieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maturite(maturiteSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zspread(zspreadSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nominal(nominalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yield(yieldSEXP);
    rcpp_result_gen = Rcpp::wrap(echeancier(coupon, maturite, zspread, nominal, yield));
    return rcpp_result_gen;
END_RCPP
}
// calc_tx_cible_ref_marche
NumericVector calc_tx_cible_ref_marche(NumericVector rdt, NumericVector alloc_mar, float ch_enc_mar, float marge_mar, float w_n, NumericVector tx_cible_prec);
RcppExport SEXP _SimBEL_calc_tx_cible_ref_marche(SEXP rdtSEXP, SEXP alloc_marSEXP, SEXP ch_enc_marSEXP, SEXP marge_marSEXP, SEXP w_nSEXP, SEXP tx_cible_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rdt(rdtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alloc_mar(alloc_marSEXP);
    Rcpp::traits::input_parameter< float >::type ch_enc_mar(ch_enc_marSEXP);
    Rcpp::traits::input_parameter< float >::type marge_mar(marge_marSEXP);
    Rcpp::traits::input_parameter< float >::type w_n(w_nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tx_cible_prec(tx_cible_precSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_tx_cible_ref_marche(rdt, alloc_mar, ch_enc_mar, marge_mar, w_n, tx_cible_prec));
    return rcpp_result_gen;
END_RCPP
}
// calc_rach_dyn
NumericVector calc_rach_dyn(NumericVector vec_param, NumericVector tx_cible, NumericVector tx_serv);
RcppExport SEXP _SimBEL_calc_rach_dyn(SEXP vec_paramSEXP, SEXP tx_cibleSEXP, SEXP tx_servSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec_param(vec_paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tx_cible(tx_cibleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tx_serv(tx_servSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_rach_dyn(vec_param, tx_cible, tx_serv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SimBEL_echeancier", (DL_FUNC) &_SimBEL_echeancier, 5},
    {"_SimBEL_calc_tx_cible_ref_marche", (DL_FUNC) &_SimBEL_calc_tx_cible_ref_marche, 6},
    {"_SimBEL_calc_rach_dyn", (DL_FUNC) &_SimBEL_calc_rach_dyn, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SimBEL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
